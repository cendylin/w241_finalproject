for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
mean(df$treat)
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
mean(df$treat)
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
mean(df$treat)
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = rbinom(size, 1, 0.5) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
# assign based on block
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = sample(c(rep(0, zero),
rep(1, size-zero)), size) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
mean(df$treat)
df$treat[df$block == 1]
nrow(d[df$block == 1,])
l = list()
l
l.append(1)
nrow(d[d$block == 1,])
nrow(d[d$block == 2,])
nrow(df[df$block == 2,])
nrow(df[df$block == 1,])
nrow(df[df$block == 2,])
nrow(df[df$block == 11,])
nrow(df[df$block == 16,])
l = list()
for (c in 1:36) {
size = nrow(d[d$block == c,])
if (size == 1) {
l = list(l, g)
}
}
l
l = list(l, 1)
l
l = list()
for (c in 1:36) {
size = nrow(d[d$block == c,])
if (size == 1) {
l = list(l, c)
}
}
l
l = list()
for (c in 1:36) {
size = nrow(d[d$block == c,])
if (size == 1) {
l = list(l, c)
}
}
l
l = list()
for (c in 1:36) {
size = nrow(d[d$block == c,])
if (size == 1) {
l = list(l, list(c))
}
}
l
l = list()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
l = list(l, list(c))
}
}
l
l = list()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
l = list(l, c)
}
}
l
l = c(l, c)
l = list()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
l = c(l, c)
}
}
l
l = ()
l = c()
l = c()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
l = c(l, c)
}
}
l
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
one_person
one_person = c()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
one_person = c(one_person, c)
}
}
one_person
df[df$block %in% one_person,]
size = nrow(df[df$block %in% one_person,])
zero = round(size/2)
sample(c(rep(0, zero), rep(1, size-zero)), size)
df$treat[df$block %in% one_person]
df$treat[df$block %in% one_person] = treatment
df[df$block %in% one_person,]                # view blocks with one person
size = nrow(df[df$block %in% one_person,])   # size of blocks with one person
zero = round(size/2)                         # calculate number in control group
treatment = sample(c(rep(0, zero),           # randomize
rep(1, size-zero)), size)
df$treat[df$block %in% one_person] = treatment
df
df[df$block %in% one_person,]
# assign based on block
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = sample(c(rep(0, zero),
rep(1, size-zero)), size) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
# Blocks with 1 person will get assigned to treatment by default
# Group blocks with 1 person and randomize within
one_person = c()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
one_person = c(one_person, c)
}
}
# Randomly assign within one-person blocks
df[df$block %in% one_person,]                # view blocks with one person
size = nrow(df[df$block %in% one_person,])   # size of blocks with one person
zero = round(size/2)                         # calculate number in control group
treatment = sample(c(rep(0, zero),           # randomize
rep(1, size-zero)), size)
df$treat[df$block %in% one_person] = treatment # assign
df[df$block %in% one_person,] # check to see if randomized
# check proportion treatment in df
mean(df$treat)
df$email[df$treat == 1]
df$email[df$treat == 0]
emails = data.frame(treat=treat, control=control)
treat = df$email[df$treat == 1]
control = df$email[df$treat == 0]
emails = data.frame(treat=treat, control=control)
rbind(treat, control)
df = list(control=control, treat=treat)
df
df = list(control=control, treat=treat)
attributes(df) = list(names = names(df),
row.names=1:max(length(control), length(treat)), class='data.frame')
df
e = list(control=control, treat=treat)
attributes(e) = list(names = names(e),
row.names=1:max(length(control), length(treat)), class='data.frame')
e
df$email[df$treat == 1]
set.seed(20)
d = read.csv("./subjects.csv")
# change column names so easier to type
colnames(d) <- c("timestamp", "email", "phone_use",
"number_phones", "age", "gender", "os",
"contact_method", "relationship")
# add ID
d$ID = seq.int(nrow(d))
# create new dataframe with encoded values for blocking
df <- data.frame(ID = seq.int(nrow(d)),
email = d$email)
# add column to identify pilot participants
df$pilot = 0 # default 0
df$pilot[d$ID > 1 & d$ID < 4 | d$ID > 6 & d$ID < 11] = 1
# Encode variables we are blocking on for easier randomizing
# encode gender (F = 1, Male & Other = 2)
df$gender = 1
df$gender[d$gender == "Male" | d$gender == "Prefer not to say"] = 2
# encode age (<24 = 1, 25-54 = 2, 55+ = 3)
df$age_code = 1
df$age_code[d$age == "25-34" | d$age == "35-44" |
d$age == "35-44" | d$age == "45-54"] = 2
df$age_code[d$age == "55-64"] = 3
# encode OS (Apple = 1, Android = 2, Other = 3)
df$os = 1
df$os[grep("Android", d$os)] = 2 # regex, if contains 'Android', encode as 2
df$os[d$os == "Blackberry"] = 3
# encode number_phones
df$num_phones = 1
df$num_phones[grep("only", d$number_phones)] = 2
# remove pilot people
df = df[df$pilot == 0,]
# all combinations of gender, age, os, num_phones
gender = unique(df$gender)
age = unique(df$age)
os = unique(df$os)
phones = unique(df$num_phones)
comb = expand.grid(gender = gender, # creates dataframe with all combos
age = age,
os = os,
phones = phones)
# label blocks 1-36
comb$block = seq.int(nrow(comb))
# add block column in randomization df
df$block = 0
# assign block to individuals
for (i in 1:nrow(df)) {
row = df[i, 4:7]                      # get blocking values in df
for(j in 1:nrow(comb)) {
combination = comb[j, 1:4]          # get blocking values in comb
block = comb[j, 5]
if (sum(row == combination) == 4) { # if blocking values are equal
df[i, 8] = block                  # assign block to df
}
}
}
# create treatment/control assignment
df$treat = 0
# assign based on block
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = sample(c(rep(0, zero),
rep(1, size-zero)), size) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
# Blocks with 1 person will get assigned to treatment by default
# Group blocks with 1 person and randomize within
one_person = c()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
one_person = c(one_person, c)
}
}
# Randomly assign within one-person blocks
df[df$block %in% one_person,]                # view blocks with one person
size = nrow(df[df$block %in% one_person,])   # size of blocks with one person
zero = round(size/2)                         # calculate number in control group
treatment = sample(c(rep(0, zero),           # randomize
rep(1, size-zero)), size)
df$treat[df$block %in% one_person] = treatment # assign
df[df$block %in% one_person,] # check to see if randomized
# check proportion treatment in df
mean(df$treat)
# view people in treatment and control
treat = df$email[df$treat == 1]
control = df$email[df$treat == 0]
df$email[df$treat == 1]
e = list(control=control, treat=treat)
attributes(e) = list(names = names(e),
row.names=1:max(length(control), length(treat)), class='data.frame')
e
# write to csv
emails = data.frame(treat=treat, control=control)
df$email[df$treat == 1]
mean(df$treat)
attributes(e) = list(names = names(e),
row.names=1:max(length(control), length(treat)), class='data.frame')
e
getwd()
write.csv(e, "email_assignments")
write.csv(treat, "email_treatment")
write.csv(treat, "email_control")
write.csv(treat, "email_treatment.csv")
write.csv(control, "email_control.csv")
treat
controt
control
set.seed(20)
d = read.csv("./subjects.csv")
# change column names so easier to type
colnames(d) <- c("timestamp", "email", "phone_use",
"number_phones", "age", "gender", "os",
"contact_method", "relationship")
# add ID
d$ID = seq.int(nrow(d))
# create new dataframe with encoded values for blocking
df <- data.frame(ID = seq.int(nrow(d)),
email = d$email)
# add column to identify pilot participants
df$pilot = 0 # default 0
df$pilot[d$ID > 1 & d$ID < 4 | d$ID > 6 & d$ID < 11] = 1
# Encode variables we are blocking on for easier randomizing
# encode gender (F = 1, Male & Other = 2)
df$gender = 1
df$gender[d$gender == "Male" | d$gender == "Prefer not to say"] = 2
# encode age (<24 = 1, 25-54 = 2, 55+ = 3)
df$age_code = 1
df$age_code[d$age == "25-34" | d$age == "35-44" |
d$age == "35-44" | d$age == "45-54"] = 2
df$age_code[d$age == "55-64"] = 3
# encode OS (Apple = 1, Android = 2, Other = 3)
df$os = 1
df$os[grep("Android", d$os)] = 2 # regex, if contains 'Android', encode as 2
df$os[d$os == "Blackberry"] = 3
# encode number_phones
df$num_phones = 1
df$num_phones[grep("only", d$number_phones)] = 2
# remove pilot people
df = df[df$pilot == 0,]
# all combinations of gender, age, os, num_phones
gender = unique(df$gender)
age = unique(df$age)
os = unique(df$os)
phones = unique(df$num_phones)
comb = expand.grid(gender = gender, # creates dataframe with all combos
age = age,
os = os,
phones = phones)
# label blocks 1-36
comb$block = seq.int(nrow(comb))
# add block column in randomization df
df$block = 0
# assign block to individuals
for (i in 1:nrow(df)) {
row = df[i, 4:7]                      # get blocking values in df
for(j in 1:nrow(comb)) {
combination = comb[j, 1:4]          # get blocking values in comb
block = comb[j, 5]
if (sum(row == combination) == 4) { # if blocking values are equal
df[i, 8] = block                  # assign block to df
}
}
}
# create treatment/control assignment
df$treat = 0
# assign based on block
for (h in 1:36) {
size = nrow(df[df$block == h,])                # get size of block
zero = round(size/2)                           # take size, divide by 2 and round down
treatment = sample(c(rep(0, zero),
rep(1, size-zero)), size) # randomly assign 1 with 0.5 prob
df$treat[df$block == h] = treatment            # assign treatment to block
}
# check proportion treatment in each block
for (g in 1:36) {
c = sum(df$treat[df$block == g] == 0)
t = sum(df$treat[df$block == g] == 1)
p = t/(c+t)
print(cat(g,p))
}
# Blocks with 1 person will get assigned to treatment by default
# Group blocks with 1 person and randomize within
one_person = c()
for (c in 1:36) {
size = nrow(df[df$block == c,])
if (size == 1) {
one_person = c(one_person, c)
}
}
# Randomly assign within one-person blocks
df[df$block %in% one_person,]                # view blocks with one person
size = nrow(df[df$block %in% one_person,])   # size of blocks with one person
zero = round(size/2)                         # calculate number in control group
treatment = sample(c(rep(0, zero),           # randomize
rep(1, size-zero)), size)
df$treat[df$block %in% one_person] = treatment # assign
df[df$block %in% one_person,] # check to see if randomized
# check proportion treatment in df
mean(df$treat)
# view people in treatment and control
treat = df$email[df$treat == 1]
control = df$email[df$treat == 0]
treat[0]
control[1]
treat[1]
length(d$treat)
length(df$treat)
nrow(d)
nrow(df)
q = merge(d, df, by.x = "email", by.y = "email")
q
q = merge(d, df, by.x = "email", by.y = "email", all.x = TRUE)
q
q[47]
q[47,]
q[76,]
source('C:/Users/cendy/Desktop/Berkeley/w241/w241_finalproject/full_randomize.R', echo=TRUE)
q[56,]
q[40,]
q[39,]
q
q[order(ID.x),]
ID.x
q[order('ID.x'),]
q
q[order(q$ID.x),]
q
q[order(q[,4])]
q[order(q[,'ID.x'])]
q[order(q$ID.x),]
assignments
assignments = merge(d, df, by.x = "email", by.y = "email", all.x = TRUE)
assignments[order(assignments$ID.x),]
assignments
assignments = merge(d, df, by.x = "email", by.y = "email", all.x = TRUE)
assignments[order(assignments$ID.x),]
assignments = assignments[order(assignments$ID.x),]
assignments
mean(assignments$treat)
mean(assignments$y.treat)
mean(assignments$treat, na.rm=TRUE)
mean(df$treat)
write.csv(assingments, "assignments.csv")
write.csv(assignments, "assignments.csv")
